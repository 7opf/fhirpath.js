focus: true
tests:
# 6.1. Equality

  - desc: '6.1 Equality'

  - desc: '6.1.1. = (Equals)'

# Returns true if the left collection is equal to the right collection:
# If both operands are collections with a single item:
# For primitives:

  - desc: '* string: comparison is based on Unicode values'
  - desc: '** strings equals'
    expression: "'abc' = 'abc'"
    result: [true]

  - desc: '** strings equals'
    expression: "Ops.str1 = Ops.str1"
    result: [true]

  - desc: '** strings not equals'
    expression: "'abc' = 'abcd'"
    result: [false]

  - desc: '** strings not equals'
    expression: "Ops.str1 = Ops.str2"
    result: [false]

  - desc: '** utf8 strings'
    expression: "'ɐ ɑ ɒ ɓ ɔ ɕ ɖ ɗ ɘ ə ɚ ɛ ɜ ɝ ɞ ɟ ɠ' = 'ɐ ɑ ɒ ɓ ɔ ɕ ɖ ɗ ɘ ə ɚ ɛ ɜ ɝ ɞ ɟ ɠ'"
    result: [true]

  - desc: '** utf8 strings'
    expression: "'ɐ ɑ ɒ ɓ ɔ ɕ ɖ ɗ ɘ ə ɚ ɛ ɜ ɝ ɞ ɟ ɠ' = 'ə ɚ ɛ ɜ ɝ ɞ ɟ ɠɐ ɑ ɒ ɓ ɔ ɕ ɖ ɗ ɘ '"
    result: [false]

  - desc: '* integer: values must be exactly equal'

  - desc: '** equal'
    expression: "1 = 1"
    result: [true]

  - desc: '** equal'
    expression: "Ops.int1 = Ops.int1"
    result: [true]

  - desc: '** not equal'
    expression: "1 = 2"
    result: [false]

  - desc: '** not equal'
    expression: "Ops.int1 = Ops.int2"
    result: [false]

  - desc: '* decimal: values must be equal, trailing zeroes are ignored'
  - desc: '** decimals equal'
    expression: "1.01 = 1.01"
    result: [true]

  - desc: '** decimals equal, trailing zeroes are ignored'
    expression: "0.01 = 00.01"
    result: [true]

  - desc: 'decimal not equal'
    expression: "1.01 = 1.02"
    result: [false]

  - desc: '* boolean: values must be the same'

  - desc: '** equal'
    expression: "true = true"
    result: [true]

  - desc: '** not equal'
    expression: "true = false"
    result: [false]

  - desc: '** propagate empty coll'
    expression: "true = Ops.unexists"
    result: []

  - desc: '* TODO: dateTime: must be exactly the same, respecting the timezone (though +24:00 = +00:00 = Z)'

# time: must be exactly the same, respecting the timezone (though +24:00 = +00:00 = Z)

# If a time or dateTime has no indication of timezone, the timezone of the
# evaluating machine is assumed.

  - desc: '* For complex types, equality requires all child properties to be equal, recursively.'

  - desc: '** two objects'
    expression: "Ops.complex = Ops.complexsame"
    result: [true]

  - desc: '** two objects not'
    expression: "Ops.complex = Ops.complexother"
    result: [false]

  - desc: '** two colls'
    expression: "Ops.coll = Ops.collsame"
    result: [true]

  - desc: '** two colls not'
    expression: "Ops.coll = Ops.collother"
    result: [false]

  - desc: '** two colls + empty'
    expression: "Ops.coll = Ops.ups"
    result: []

# If both operands are collections with multiple items:

# Each item must be equal

# Comparison is order dependent

# Otherwise, equals returns false.

# Note that this implies that if the collections have a different number of
# items to compare, the result will be false.

# Typically, this operator is used with single fixed values as operands. This
# means that Patient.telecom.system = 'phone' will return false if there is more
# than one telecom with a use. Typically, you’d want
# Patient.telecom.where(system = 'phone')

  - desc: '** lenght missmatch'
    expression: "Ops.coll.a = 1"
    result: [false]

  - desc: '** lenght match'
    expression: "Ops.coll.a.first() = 1"
    result: [true]

# If one or both of the operands is the empty collection, this operation returns
# an empty collection.

  - desc: '** empty right'
    expression: "Ops.coll.a.first() = Ops.unexists"
    result: []

  - desc: '** empty left'
    expression: "Ops.unexists = Ops.coll.a.first()"
    result: []

# For dateTime and time comparisons with partial values (e.g. dateTimes
# specified only to the day, or times specified only to the hour), the
# comparison returns empty ({ }), not false.

  - desc: '6.1.2. ~ (Equivalent)'

# Returns true if the collections are the same. In particular, comparing empty
# collections for equivalence { } ~ { } will result in true.

  - desc: '* collections for equivalence { } ~ { } will result in true.'
    expression: "Ops.unexists ~ Ops.unexists"
    result: [true]

# If both operands are collections with a single item:

# For primitives

  - desc: '* string: the strings must be the same while ignoring case and normalizing whitespace.'
    expression: "'ab c' ~ 'Ab  C'"
    result: [true]

# integer: exactly equal

# decimal: values must be equal, comparison is done on values rounded to the
# precision of the least precise operand. Trailing zeroes are ignored in
# determining precision.

# dateTime and time: values must be equal, except that for partial date/time
# values, the comparison returns false, not empty ({ }). If one operand has less
# precision than the other, comparison is done at the lowest precision.

# boolean: the values must be the same

# For complex types, equivalence requires all child properties to be equivalent, recursively.

# If both operands are collections with multiple items:

# Each item must be equivalent

# Comparison is not order dependent

# Note that this implies that if the collections have a different number of
# items to compare, the result will be false.


  - desc: '6.1.3. != (Not Equals)'

# The inverse of the equals operator.

  - desc: '6.1.4. !~ (Not Equivalent)'
# The inverse of the equivalent operator.

subject:
  resourceType: Ops
  str1: string1
  str2: string2
  int1: 1
  int2: 2
  coll:
    - a: 1
    - a: 2
    - a: 3
  collsame:
    - a: 1
    - a: 2
    - a: 3
  collother:
    - a: 1
    - a: 2
    - a: 3
    - a: 4
  complex:
    a: 1
    b:
      c: str
    d:
      - e: 1
  complexsame:
    a: 1
    b:
      c: str
    d:
      - e: 1
  complexother:
    a: 1
    b:
      c: str
    d:
      - e: 2

